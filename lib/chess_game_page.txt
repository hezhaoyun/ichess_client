import 'package:flutter/material.dart';
import 'package:stockfish/stockfish.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';

import 'package:wp_chessboard/wp_chessboard.dart';

class ChessGamePage extends StatefulWidget {
  const ChessGamePage({super.key});

  @override
  State<ChessGamePage> createState() => _ChessGamePageState();
}

class _ChessGamePageState extends State<ChessGamePage> {
  late WPChessboardController controller;
  late Stockfish stockfish;
  List<String> moves = [];
  bool isThinking = false;

  @override
  void initState() {
    super.initState();
    controller = WPChessboardController();
    initStockfish();
  }

  Future<void> initStockfish() async {
    stockfish = Stockfish();
    stockfish.stdin = 'setoption name Skill Level value 10';
    stockfish.stdin = 'uci';
    stockfish.stdin = 'isready';
  }

  void onMove(String move) {
    moves.add(move);

    if (!controller.isGameOver) {
      makeComputerMove();
    }
  }

  Future<void> makeComputerMove() async {
    setState(() => isThinking = true);

    stockfish.stdin = 'position startpos moves ${moves.join(' ')}';
    stockfish.stdin = 'go movetime 1000';

    await Future.delayed(const Duration(seconds: 1));
    final output = stockfish.lastInfoLine;
    final bestMove = output.split(' ').firstWhere(
          (e) => e.length == 4 && e.contains(RegExp(r'[a-h][1-8]')),
          orElse: () => '',
        );

    if (bestMove.isNotEmpty) {
      controller.makeMove(bestMove);
      moves.add(bestMove);
    }

    setState(() => isThinking = false);
  }

  Future<void> saveGame() async {
    final directory = await getApplicationDocumentsDirectory();
    final file = File('${directory.path}/chess_game_${DateTime.now().millisecondsSinceEpoch}.txt');
    await file.writeAsString(moves.join(' '));
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('棋局已保存')),
      );
    }
  }

  void newGame() {
    setState(() {
      controller.resetBoard();
      moves.clear();
    });
  }

  void undoMove() {
    if (moves.length >= 2) {
      setState(() {
        controller.undoMove();
        controller.undoMove();
        moves.removeLast();
        moves.removeLast();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('国际象棋对战'),
        actions: [
          IconButton(
            icon: const Icon(Icons.save),
            onPressed: saveGame,
          ),
        ],
      ),
      body: Column(
        children: [
          Expanded(
            child: Center(
              child: WPChessboard(
                controller: controller,
                boardType: WPChessBoardType.brown,
                onMove: onMove,
                size: MediaQuery.of(context).size.width,
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                ElevatedButton(
                  onPressed: newGame,
                  child: const Text('新局'),
                ),
                ElevatedButton(
                  onPressed: undoMove,
                  child: const Text('悔棋'),
                ),
                if (isThinking) const CircularProgressIndicator()
              ],
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    stockfish.dispose();
    controller.dispose();
    super.dispose();
  }
}
